name: CI
on:
  pull_request:
  push:
    branches:
      - main
      - ci
  schedule:
    - cron: '33 20 * * 0' # Sun *-*-* 20:33:00 UTC
  workflow_dispatch:

permissions:
  contents: read

env:
  RUST_BACKTRACE: full

defaults:
  run:
    shell: bash

jobs:
  code-style:
    name: Code style
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.schedule != '33 20 * * *'
    env:
      RUSTFLAGS: -Dwarnings
      RUSTDOCFLAGS: -Dwarnings
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - run: cargo fmt --all -- --check
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      - run: cargo clippy --all-targets --workspace
      - run: cargo doc --workspace

  test:
    needs: code-style
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, beta, nightly]
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-latest, windows-latest]
        platform: ['']
        include:
          - rust: stable
            os: windows-latest
            platform: x86_64-pc-windows-gnu
          - rust: stable
            os: windows-latest
            platform: i686-pc-windows-gnu
          - rust: stable
            os: windows-latest
            platform: i686-pc-windows-msvc
    name: Test ${{ matrix.rust }} on ${{ matrix.platform || matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install MinGW
        if: matrix.platform == 'i686-pc-windows-gnu'
        # See: https://github.com/egor-tensin/setup-mingw/issues/17
        uses: egor-tensin/setup-mingw@v2.2.0
        with:
          platform: x86
          version: 12.2.0
      - name: Install Rust
        run: |
          rustup update --no-self-update
          rustup default ${{ matrix.rust }}
          platform='${{ matrix.platform }}'
          if [[ -n "$platform" ]]; then
            echo "Use non-default platform: $platform"
            rustup target add "$platform"
            mkdir -p .cargo
            echo "build.target = '$platform'" >.cargo/config.toml
          fi
      - name: Enable type layout randomization
        run: echo RUSTFLAGS=${RUSTFLAGS}\ -Zrandomize-layout >> $GITHUB_ENV
        if: matrix.rust == 'nightly'
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Test
        run: |
          for flags in {,--features=unwind}' '{,'--release -- --include-ignored'}; do
            echo RUN cargo test $flags
            cargo test $flags -- --test-threads 1
          done

  test-exotic:
    needs: code-style
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        platform:
          - riscv64gc-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
        include:
          - platform: riscv32i-unknown-none-elf
            nostd: true
          - platform: riscv32e-unknown-none-elf
            nostd: true
    env:
      RUSTFLAGS: ${{ matrix.nostd && '-Cpanic=abort' || '' }}
      CARGO_ARGS: ${{ matrix.nostd && '-Zbuild-std=core --example=codegen --no-default-features' || '--all-targets' }}
    name: Test QEMU ${{ matrix.platform }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Prepare devShell
        run: nix develop --command true

      - name: Disable dev-dependencies and set target
        run: |
          sed \
            -e 's/\[dev-dependencies]/[workaround-avoid-dev-deps]/g' \
            -e 's/bench/no-bench/g' \
            --in-place ./Cargo.toml
          rm -r benches tests/dwarf.rs
          mkdir -p .cargo
          echo 'build.target = "${{ matrix.platform }}"' >.cargo/config.toml

      - name: Build
        run: |
          nix develop --command cargo build $CARGO_ARGS
          nix develop --command cargo build $CARGO_ARGS --release

      - name: Test
        if: ${{ !matrix.nostd }}
        run: nix develop --command cargo test
      - name: Test release
        if: ${{ !matrix.nostd }}
        run: nix develop --command cargo test --release

  msrv:
    name: MSRV
    needs: code-style
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.schedule != '33 20 * * *'
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@1.87
      - uses: Swatinem/rust-cache@v2
      - name: Test
        run: |
          for flags in {,--features=unwind}' '{,'--release -- --include-ignored'}; do
            echo RUN cargo test $flags
            cargo test $flags
          done
